# This configuration file for NGINX defines two server blocks: 
# one for HTTP (port 80): should not work 
# and another for HTTPS (port 443), as required in the subject

server {
		# listens on port 80 for HTTP connections.
        listen 80;
		# the server name for this block
        server_name $DOMAIN;

		#This location block matches any request to the server block's domain and returns a status code of 444, 
		#which means "No Response" and closes the connection immediately. 
		#This effectively rejects any HTTP requests to this domain.
        location / {
            return 444;
        }
    }

server {
	# listens on port 443 for HTTPS connections (SSL/TLS)
    listen 443 ssl;
	# This line is for IPv6 compatibility, the most recent version of the Internet Protocol.
    # Ensuring that servers are configured to support both IPv4 and IPv6, so they can accept connections from any type of client
    listen [::]:443 ssl;
	# Specifies the server names for which this block should handle requests
    server_name www.$DOMAIN $DOMAIN;

	# This directive specifies that only TLS version 1.3 should be used for secure connections; TLSv1.3 is the latest and most secure protocol version available.
    ssl_protocols TLSv1.3;

	# Specifies the path to the SSL certificate file
    ssl_certificate /etc/ssl/private/$DOMAIN.crt;
	# Specifies the path to the SSL private key file
    ssl_certificate_key /etc/ssl/private/$DOMAIN.key;

	#Defines the root directory where your web files are stored -> $document_root
    root /var/www/inception/;

	# The index directive tells Nginx which file to serve by default when a directory is requested (what files to look for in the /var/www/inception/ dir)
    # index.php: the main entry point for WordPress: it initializes the WordPress environment and loads the appropriate content based on the request.
    index index.php;

	# The location blocks define how the server should respond to different types of requests based on URI (Uniform Resource Identifier) or request pattern
    # This configuration ensures that only existing files and directories are served directly, and that PHP scripts are properly processed by the FastCGI server.
	
    # This block defines the behavior for requests not matching any other location block:
	# It tries to find a matching file ($uri) or directory ($uri/). If neither is found, it returns a 404 error.
    location / {
        try_files $uri $uri/ =404;
    }

	# This is the key section that facilitates the connection between the Nginx container and the WordPress container:
	    # Checks if the requested file exists, and if not, returns a 404 error
	    # Forwards PHP requests to the wordpress container (a fast cgi server), listening on port 9000
	    # Includes standard fastCGI configurations
        # Sets the $SCRIPT_FILENAME parameter for PHP scripts, ensuring that the FastCGI server receives the correct absolute path of the PHP file to execute
    location ~ [^/]\.php(/|$) {
        try_files $uri =404;
        fastcgi_pass wordpress:9000;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    }
}